// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  username        String?   @db.VarChar(50)
  password        String?   // for local auth, null if using OAuth
  provider        String    @default("local") // "local" or "google"
  verifiedAt      DateTime? // null until verified
  googleId        String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  profile         Profile?
  token           RefreshToken[]
  tasks           Tasks[]
  emailToken      EmailVerificationToken[]
  resetPasswordToken  ResetPasswordToken[]
}

model Profile {
  id              Int @id @default(autoincrement())
  firstname       String? @db.VarChar(50)
  lastname        String? @db.VarChar(50)
  profession      String? @db.VarChar(100)
  profileImage    String? @db.VarChar(256)
  userId          Int     @unique
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)   
}

model RefreshToken {
  id              Int       @id @default(autoincrement())
  refreshToken    String    @unique @db.VarChar(256)
  expiresAt       DateTime
  revoked         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          Int
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerificationToken {
  id              Int        @id @default(autoincrement())
  token           String     @unique  @db.VarChar(256)
  userId          Int
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isUsed          Boolean   @default(false)
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ResetPasswordToken {
  id              Int        @id @default(autoincrement())
  token           String     @unique  @db.VarChar(256)
  userId          Int
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isUsed          Boolean   @default(false)
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Tasks {
  id              Int       @id @default(autoincrement())
  title           String    @db.VarChar(256)
  status          Int       @default(1) // 1 = Pending, 2 = Running, 3 = Completed,

  startAt         DateTime
  endAt           DateTime
  timeZone        String    @db.VarChar(64)

  localStartDate  String?   @db.VarChar(64)
  localStartHour  Int?
  localEndDate    String?   @db.VarChar(64)
  localEndHour    Int?

  userId          Int
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reminderLogs    ReminderLog[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt()

  @@index([status, startAt])
  @@index([status, endAt])
  @@index([userId])
}


model ReminderLog {
  id              Int       @id @default(autoincrement())
  taskId          Int     
  task            Tasks     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  reminderType    ReminderType
  sentAt          DateTime  @default(now())

  @@unique([taskId, reminderType])
  @@index([sentAt])
}

enum ReminderType {
  BEFORE_24H
  BEFORE_1H
  AT_START
  BEFORE_1H_END
  AT_END
}